app {
  name = "FAIR4Health PPDDM-Manager" // Instance name. Also used as the Spark App Name.
}

server { // Server deployment settings.
  host = 0.0.0.0
  port = 8000
  base-uri = manager
}

spark {
  master = "local[2]" //used only in standalone mode
}

agents.definition-path = "agents.json"

# MongoDB database configurations for PPDDM Manager
mongodb {
  # The application can be run on an embedded MongoDB instance.
  # If embedded is true, then the following parameters are used to start the embedded instance up.
  # The binding will be done on 'host:port' parameters and the given 'db' will be created automatically.
  embedded = false

  # Host and port for the MongoDB database
  host = localhost
  port = 27017

  # Database name for PPDDM Manager documents
  db = ppddm-manager

  # Whether to drop the existing database ('db') while connecting the MongoDB
  # If true, the 'db' will be dropped and re-created, hence the application will have a fresh start.
  # WARNING: Use with caution. You can loose all your data.
  drop = false

  #Uncomment below if MongoDB requires user authentication
  # Database name for MongoDB administration
  #authdb = admin
  # Username to connect to database
  #username = admin
  # Password to connect to database
  #password = 5rdc

  # MongoDB connection pooling configurations
  pooling {
    #minimum number of connections in pool
    minSize = 5
    #maximum number of connections in pool
    maxSize = 20
    #The maximum time that a thread may wait for a connection to become available. (in seconds)
    maxWaitTime = 180
    #The maximum time (in seconds) a pooled connection can live for. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
    maxConnectionLifeTime = 1200
  }
}

akka {
  actor {
    debug {
      receive = off
      lifecycle = off
    }
  }
  http.server {
    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # If this setting is not `infinite` the HTTP server layer attaches a
    # `Timeout-Access` header to the request, which enables programmatic
    # customization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 120.second
  }
}
